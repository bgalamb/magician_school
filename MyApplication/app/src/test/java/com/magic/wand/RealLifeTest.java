package com.magic.wand;

import com.magic.wand.calculus.Levenstein;
import com.magic.wand.calculus.MovingAverage;
import com.magic.wand.calculus.Normalizer;

import org.junit.Test;

public class RealLifeTest {

    //first set of movements
    double[] measuredDataSheet1a = {-1.8387469, -1.9068487, -2.0975335, -2.0975335, -1.8659877, -2.0566726, -2.0566726, -1.9885708, -1.8659877, -1.8659877, -1.7978859, -1.8387469, -1.8659877, -2.0566726, -2.1792557, -2.2882185, -2.2882185, -2.4108016, -2.4516625, -2.2201166, -1.8387469, -1.484618, -1.2258313, -1.0215261, -0.7218784, -0.19068487, 0.38136974, 0.6810174, 0.9942854, 0.9942854, 1.0215261, 0.9125633, 0.95342433, 0.8308412, 0.53119355, 0.10896278, -0.4903325, -1.56634, -2.4789033, -3.13268, -3.7047346, -4.0588636, -4.3176503, -4.739881, -4.903325, -4.780742, -4.903325, -4.8216033, -4.903325, -5.053149, -5.3119354, -5.3936577, -5.3119354, -5.47538, -6.0474343, -5.9248514, -5.434519, -5.202973, -5.3936577, -5.053149, -4.8216033, -4.671779, -4.399372, -3.8954194, -3.405087, -3.091819, -2.8602731, -2.6423476, -2.3699405, -2.0294318, -1.56634, -1.0215261, -0.40861043, 0.027240695, 0.25878662, 0.5720546, 0.9125633, 1.525479, 1.9477097, 2.0566726, 2.3699405, 2.2473574, 2.6014864, 2.901134, 3.091819, 3.214402, 3.445948, 3.5549107, 4.0588636, 4.2086873, 4.399372, 4.780742, 5.09401, 5.3119354, 5.5434813, 5.5162406, 5.3936577, 5.1212506, 4.5900574, 4.0588636, 3.2825038, 2.3290794, 1.6344417, 1.2258313, 0.4903325, -0.21792556, -1.334794, -2.0294318, -2.669588, -3.3642259, -3.8681788, -3.8681788, -3.5549107, -3.0645783, -2.5606253, -2.1792557, -1.9068487, -1.484618, -0.8036005, -0.21792556, 0.06810174, 0.19068487, 0.21792556, 0.3405087, 0.4903325, 0.61291564, 0.7218784, 0.7218784, 0.8308412, 0.87170225, 0.7218784, 0.6810174, 0.5720546, 0.5720546, 0.40861043, 0.3405087, 0.21792556, 0.027240695, -0.19068487, -0.3405087, -0.5720546, -0.87170225, -1.0623871, -1.253072, -1.4165162, -1.4437568, -1.334794, -1.1441092, -0.7627395, -0.4903325, -0.027240695, 0.38136974, 0.5720546, 0.8036005, 0.9125633, 1.1441092, 1.2258313, 1.1032481, 1.0623871, 0.9942854, 0.9942854, 0.9942854, 1.0623871, 0.9942854, 0.9942854, 0.9125633, 0.8036005, 0.6810174, 0.3405087, 0.21792556, 0.29964766, 0.29964766, 0.19068487, 0.19068487, 0.14982383, 0.19068487, 0.21792556, 0.21792556, 0.21792556, 0.14982383, 0.21792556, 0.29964766, 0.25878662, 0.14982383, 0.21792556, 0.19068487, 0.29964766, 0.29964766, 0.21792556, 0.10896278, 0.21792556, 0.14982383, 0.21792556, 0.19068487, 0.14982383, 0.19068487, 0.14982383, 0.19068487, 0.3405087, 0.19068487};
    double[] measuredDataSheet1b = {-1.7978859, -1.8387469, -2.0294318, -1.9885708, -1.9885708, -2.5606253, -2.4516625, -2.5197644, -2.4789033, -2.4516625, -2.5606253, -2.7921712, -2.7104492, -2.7513103, -2.7104492, -2.901134, -3.091819, -3.0237172, -2.6423476, -2.3699405, -1.6753027, -1.253072, -0.6401563, -0.19068487, 0.3405087, 0.8036005, 1.334794, 1.7978859, 2.0975335, 2.1383946, 1.9885708, 1.8659877, 1.56634, 1.3756552, 0.95342433, 0.53119355, 0.38136974, 0.10896278, 0.06810174, -0.0, -0.19068487, -0.6401563, -1.0623871, -1.6753027, -2.6014864, -3.7047346, -4.5900574, -5.09401, -5.6660647, -7.1234417, -7.2324047, -7.5456724, -8.22669, -8.22669, -7.84532, -8.036005, -8.771504, -8.499097, -7.84532, -7.7363577, -7.995144, -7.804459, -7.3822284, -6.891896, -6.469665, -6.2789803, -5.7750273, -4.862464, -4.0180025, -3.255263, -2.8330324, -2.4789033, -2.2473574, -1.607201, -0.9125633, -0.3405087, 0.027240695, 0.44947147, 0.53119355, 1.0215261, 1.293933, 1.484618, 1.8659877, 1.9477097, 2.2201166, 2.4108016, 2.6014864, 2.669588, 2.669588, 3.0237172, 3.3233647, 3.6774938, 4.2086873, 4.5491962, 4.862464, 5.1621118, 5.434519, 5.5434813, 5.202973, 4.971427, 4.5900574, 4.167826, 3.9362805, 3.255263, 2.2882185, 1.4437568, 0.61291564, -0.29964766, -1.525479, -2.4789033, -3.13268, -3.7455957, -4.0180025, -4.0588636, -3.9771416, -3.3642259, -2.8602731, -2.2201166, -1.6753027, -1.4437568, -0.8036005, -0.44947147, -0.40861043, -0.14982383, -0.19068487, -0.14982383, -0.10896278, -0.19068487, -0.06810174, -0.027240695, -0.14982383, -0.06810174, -0.027240695, 0.027240695, -0.0, 0.027240695, 0.06810174, -0.0, 0.027240695, 0.06810174, 0.027240695, 0.14982383, 0.06810174, -0.0, -0.0, -0.0, -0.027240695, -0.0, -0.0, -0.0, -0.0, 0.06810174, -0.06810174, -0.0, 0.027240695, 0.027240695, 0.06810174, -0.0, -0.027240695, 0.027240695, 0.027240695, -0.0, 0.027240695, 0.027240695, 0.027240695, 0.027240695, 0.027240695, -0.0, -0.0, 0.027240695, 0.027240695, 0.027240695, -0.0, -0.0, 0.027240695, 0.027240695, 0.06810174, 0.027240695, 0.027240695, -0.0, 0.06810174, 0.027240695, -0.0, 0.027240695, 0.027240695, -0.0, -0.0, 0.06810174, 0.027240695, 0.027240695, 0.027240695, -0.0, 0.06810174, 0.027240695, 0.027240695, 0.06810174, -0.0, 0.06810174, -0.0, 0.06810174};
    double[] measuredDataSheet1c = {-1.484618, -1.4437568, -1.3756552, -1.4437568, -0.9125633, -1.334794, -1.9477097, -0.9125633, -1.1032481, -1.0623871, -0.9942854, -1.1849703, -1.293933, -1.484618, -1.4437568, -1.6753027, -1.6753027, -1.8387469, -1.9068487, -1.7978859, -1.8387469, -1.9068487, -1.7161638, -1.484618, -1.4437568, -1.253072, -0.8036005, -0.4903325, -0.19068487, 0.21792556, 0.53119355, 0.95342433, 1.1441092, 1.525479, 2.2201166, 2.4789033, 2.8602731, 3.091819, 3.3642259, 3.5549107, 3.6774938, 3.8954194, 3.636633, 3.0237172, 2.5197644, 1.484618, 0.61291564, -0.38136974, -1.3756552, -2.2882185, -2.8602731, -3.7864566, -4.4810944, -4.4810944, -4.2495484, -4.671779, -5.3527966, -5.5843425, -5.1212506, -4.930566, -5.434519, -6.1291566, -6.006573, -5.8976107, -5.5434813, -5.6660647, -5.5162406, -4.903325, -4.739881, -4.780742, -4.739881, -3.9362805, -3.255263, -2.7104492, -1.9885708, -0.9125633, -0.44947147, -0.14982383, 0.25878662, 1.0623871, 1.3756552, 1.4165162, 1.9068487, 2.4789033, 2.6423476, 2.7921712, 3.173541, 3.445948, 3.6774938, 3.7864566, 3.9771416, 4.1269655, 4.440233, 4.5900574, 4.69902, 4.780742, 4.8216033, 4.903325, 5.012288, 5.3527966, 5.5434813, 5.6660647, 5.8567495, 6.006573, 6.0474343, 5.8567495, 5.5843425, 5.09401, 4.630918, 4.2086873, 3.5957718, 2.669588, 1.9068487, 1.1441092, 0.25878662, -0.95342433, -1.56634, -2.5606253, -3.3642259, -3.5957718, -3.6774938, -3.8273177, -3.9771416, -3.8954194, -3.255263, -2.6423476, -1.9068487, -1.4165162, -0.7627395, -0.25878662, 0.06810174, 0.21792556, 0.25878662, 0.25878662, 0.29964766, 0.38136974, 0.25878662, 0.25878662, 0.29964766, 0.25878662, 0.19068487, 0.21792556, 0.21792556, 0.25878662, 0.38136974, 0.3405087, 0.38136974, 0.40861043, 0.4903325, 0.4903325, 0.4903325, 0.38136974, 0.44947147, 0.40861043, 0.40861043, 0.38136974, 0.53119355, 0.38136974, 0.38136974, 0.38136974, 0.3405087, 0.40861043, 0.38136974, 0.3405087, 0.3405087, 0.38136974, 0.4903325, 0.44947147, 0.3405087, 0.3405087, 0.44947147, 0.4903325, 0.44947147, 0.38136974, 0.38136974, 0.40861043, 0.40861043, 0.4903325, 0.40861043, 0.38136974, 0.29964766, 0.21792556, 0.3405087, 0.25878662, 0.38136974, 0.3405087, 0.38136974, 0.44947147, 0.3405087, 0.40861043, 0.38136974, 0.40861043, 0.3405087, 0.25878662, 0.29964766, 0.38136974, 0.3405087, 0.25878662, 0.06810174, 0.19068487};
    double[] measuredDataSheet1d = {-1.0215261, -0.87170225, -0.9125633, -0.3405087, -1.8387469, -0.9125633, -0.9125633, -0.9942854, -0.9942854, -0.7627395, -0.95342433, -0.9942854, -0.87170225, -0.7627395, -0.87170225, -0.7627395, -0.8308412, -0.8036005, -0.7627395, -0.6401563, -0.53119355, -0.61291564, -0.5720546, -0.53119355, -0.61291564, -0.53119355, -0.40861043, -0.44947147, -0.44947147, -0.6401563, -0.5720546, -0.4903325, -0.61291564, -0.4903325, -0.06810174, 0.38136974, 0.8308412, 1.1849703, 1.1849703, 0.9125633, 0.5720546, 0.25878662, 0.14982383, -0.19068487, -0.38136974, -0.6810174, -1.4165162, -2.3699405, -3.0237172, -3.405087, -4.0180025, -4.8216033, -5.1212506, -5.5162406, -5.47538, -5.3119354, -5.5843425, -5.9248514, -6.006573, -5.706926, -5.5162406, -5.47538, -5.3936577, -5.243834, -5.09401, -5.284695, -5.434519, -5.053149, -4.8216033, -4.862464, -4.69902, -3.8273177, -2.9419951, -2.5197644, -1.7161638, -0.8308412, -0.5720546, -0.4903325, 0.027240695, 0.8308412, 1.293933, 1.525479, 2.2201166, 2.5606253, 3.173541, 3.4731886, 3.5140498, 3.6774938, 4.0180025, 4.2904096, 4.167826, 4.2495484, 4.2495484, 4.2086873, 4.0588636, 4.167826, 4.0588636, 4.167826, 4.440233, 4.69902, 4.780742, 5.202973, 5.3119354, 4.930566, 4.440233, 4.0588636, 3.5549107, 2.901134, 2.4789033, 2.0975335, 1.484618, 0.7218784, 0.027240695, -1.253072, -2.2882185, -2.6423476, -3.0645783, -3.405087, -3.8681788, -4.2904096, -4.508335, -4.4810944, -3.7455957, -3.0237172, -2.8602731, -2.8330324, -2.2882185, -1.1441092, -0.44947147, -0.0, 0.25878662, 0.40861043, 0.4903325, 0.44947147, 0.40861043, 0.44947147, 0.40861043, 0.53119355, 0.44947147, 0.40861043, 0.3405087, 0.38136974, 0.25878662, 0.21792556, 0.19068487, 0.10896278, 0.14982383, 0.10896278, 0.06810174, 0.10896278, 0.027240695, 0.06810174, 0.19068487, 0.21792556, 0.25878662, 0.21792556, 0.29964766, 0.44947147, 0.21792556, 0.14982383, 0.19068487, 0.25878662, 0.14982383, 0.10896278, 0.19068487, 0.14982383, 0.027240695, 0.10896278, 0.10896278, 0.10896278, 0.06810174, 0.21792556, 0.10896278, 0.21792556, 0.14982383, 0.027240695, 0.06810174, -0.0, 0.027240695, 0.06810174, 0.027240695, 0.027240695, 0.027240695, -0.0, 0.027240695, 0.06810174, -0.0, -0.0, 0.027240695, 0.06810174, -0.0, -0.027240695, -0.0, -0.0, 0.027240695, 0.027240695, -0.0, -0.0, -0.027240695, -0.0};

    //second set of movements
    double[] measuredSeriesSheet7a = {-0.0, 1.56634, 1.56634, 1.9477097, 2.2473574, 2.4108016, 2.4108016, 3.091819, 3.2825038, 3.405087, 3.7455957, 4.0588636, 4.2086873, 3.8681788, 3.7455957, 3.8681788, 3.255263, 2.5197644, 2.1792557, 1.525479, 0.8308412, 0.53119355, -0.21792556, -1.3756552, -1.6344417, -2.5197644, -3.214402, -3.5549107, -3.6774938, -4.399372, -4.862464, -4.5900574, -4.2495484, -4.508335, -4.739881, -4.630918, -3.9771416, -3.214402, -3.214402, -2.7104492, -2.2201166, -1.525479, -1.525479, -2.4108016, -1.607201, -0.29964766, -0.53119355, -0.6401563, 0.29964766, 0.95342433, 0.61291564, 0.9125633, 2.2882185, 2.4108016, 3.13268, 3.5140498, 4.3176503, 4.971427, 5.5162406, 5.8158884, 6.0474343, 6.238119, 6.1291566, 6.006573, 6.1563973, 5.7341666, 5.3527966, 4.903325, 4.739881, 4.739881, 4.440233, 4.2495484, 4.1269655, 3.9771416, 3.5549107, 3.13268, 3.0237172, 2.6014864, 1.7570249, 1.0623871, 0.9942854, 0.4903325, 0.06810174, 0.027240695, 0.25878662, 0.3405087, 0.5720546, 0.53119355, 0.7218784, 0.53119355, 0.44947147, 0.6401563, 0.9125633, 0.87170225, 0.7627395, 0.61291564, 0.6810174, 1.0215261, 1.1849703, 0.7218784, 0.8308412, 1.1849703, 0.9942854, 1.4437568, 1.6753027, 1.1032481, 1.1032481, 0.9942854, 0.9125633, 0.95342433, 1.1441092, 1.1032481, 1.0623871, 1.607201, 2.3699405, 2.0294318};
    double[] measuredSeriesSheet7b = {1.4437568, 1.7978859, 1.607201, 1.7161638, 1.7161638, 2.0294318, 2.1792557, 2.2473574, 2.5197644, 3.0645783, 3.5549107, 3.7047346, 3.4731886, 3.405087, 3.13268, 3.0645783, 2.7921712, 2.1383946, 1.6344417, 1.0215261, 0.06810174, -0.40861043, -0.21792556, -0.10896278, -1.607201, -2.8602731, -2.7513103, -2.1792557, -2.4789033, -4.2904096, -3.8954194, -3.3233647, -3.445948, -4.0588636, -3.8954194, -3.636633, -3.3233647, -3.5140498, -3.405087, -2.7104492, -2.6423476, -2.2201166, -1.7570249, -1.7161638, -1.293933, -1.1849703, -0.7218784, -1.1032481, -0.6810174, -0.4903325, 0.25878662, 1.0623871, 1.6344417, 1.8659877, 2.1383946, 2.3699405, 2.8602731, 3.173541, 3.3642259, 3.5957718, 4.0861044, 4.69902, 4.671779, 4.780742, 5.202973, 5.1212506, 4.903325, 4.930566, 4.8216033, 4.739881, 4.5900574, 4.167826, 3.8954194, 3.8273177, 3.7864566, 3.5549107, 3.3642259, 3.3642259, 3.13268, 3.3642259, 2.7513103, 2.2473574, 2.0975335, 1.6753027, 1.4437568, 0.9942854, 0.10896278, -0.38136974, -0.7218784, -1.3756552, -1.4437568, -1.253072, -1.3756552, -1.334794, -0.87170225, -0.61291564, -0.53119355, -0.10896278, -0.027240695, 0.14982383, 0.21792556, 0.14982383, 0.06810174, 0.19068487, 0.38136974, 0.40861043, 0.38136974, 0.38136974, 0.4903325, 0.4903325, 0.4903325, 0.4903325, 0.7218784, 0.6810174, 0.6401563, 0.6401563, 0.4903325};

    @Test
    public void testLevensteinWithRealData_1_And_2() {
        int value = Levenstein.numbericDistance2(
                measuredDataSheet1a,
                measuredDataSheet1b,
                2.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData_1_And_2_MovingAverages() {
        int value = Levenstein.numbericDistance2(
                MovingAverage.movingAvergageOfBase(2, measuredDataSheet1a),
                MovingAverage.movingAvergageOfBase(2, measuredDataSheet1b),
                2.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData_1_And_2_Normalization() {

        double data1Max = Normalizer.calc_max(measuredDataSheet1a);
        double data2Max = Normalizer.calc_max(measuredDataSheet1b);

        double ratio = data1Max/data2Max;

        Normalizer.multiplyElements(ratio,measuredDataSheet1b);

        int value = Levenstein.numbericDistance2(
                measuredDataSheet1a,
                measuredDataSheet1b,
                2.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData_3_And_4() {
        int value = Levenstein.numbericDistance2(
                measuredDataSheet1c,
                measuredDataSheet1d,
                2.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData_3_And_4_MovingAverages() {
        int value = Levenstein.numbericDistance2(
                MovingAverage.movingAvergageOfBase(2, measuredDataSheet1c),
                MovingAverage.movingAvergageOfBase(2, measuredDataSheet1d),
                2.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData_3_And_4_Normalization() {

        double data1Max = Normalizer.calc_max(measuredDataSheet1c);
        double data2Max = Normalizer.calc_max(measuredDataSheet1d);

        double ratio = data1Max/data2Max;

        Normalizer.multiplyElements(ratio,measuredDataSheet1d);

        int value = Levenstein.numbericDistance2(
                measuredDataSheet1c,
                measuredDataSheet1d,
                2.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    /*
    @Test
    public void testLevensteinWithRealData3() {
        int value = Levenstein.numbericDistance2(
                measuredData1,
                measuredData4,
                1.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData4() {
        int value = Levenstein.numbericDistance2(
                measuredData1,
                measuredData5,
                1.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData6() {
        int value = Levenstein.numbericDistance2(
                measuredData2,
                measuredData4,
                1.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData7() {
        int value = Levenstein.numbericDistance2(
                measuredData2,
                measuredData5,
                1.5);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

  @Test
    public void testLevensteinWithRealData10() {
        int value = Levenstein.numbericDistance2(
                measuredData4,
                measuredData5,
                3.0);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithRealData10b() {
        int value = Levenstein.numbericDistance2(
                measuredData5,
                measuredData4,
                3.0);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    /*@Test
    public void testLevensteinWithRealMoveingAverages2() {
        int value = Levenstein.numbericDistance2(
                MovingAverage.movingAvergageOfBase(3, measuredData4MovingAverage1),
                MovingAverage.movingAvergageOfBase(3, measuredData5MovingAverage),
                3.0);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }

    @Test
    public void testLevensteinWithNormalization() {
        double[] data1 = MovingAverage.movingAvergageOfBase(3, measuredData4MovingAverage1);
        double[] data2 = MovingAverage.movingAvergageOfBase(3, measuredData5MovingAverage);

        double data1Max = Normalizer.calc_max(data1);
        double data2Max = Normalizer.calc_max(data2);

        double ratio = data1Max/data2Max;

        Normalizer.multiplyElements(ratio,data2);

        int value = Levenstein.numbericDistance2(
                data1,
                data2,
                2.0);
        System.out.println(value);
        //Assert.assertTrue(value ==    25);
    }
*/

}
